// pages/pzem017.js - PZEM-017 DC Solar Data Page
class PZEM017Page {
    constructor() {
        this.pageTitle = 'PZEM-017 (DC Solar)';
        this.sensorType = 'pzem017';
        this.columns = [
            { key: 'timestamp', label: 'Timestamp', type: 'timestamp' },
            { key: 'parsed_data.voltage_v', label: 'Voltage (V)', type: 'voltage' },
            { key: 'parsed_data.current_a', label: 'Current (A)', type: 'current' },
            { key: 'parsed_data.power_w', label: 'Power (W)', type: 'power' },
            { key: 'parsed_data.energy_kwh', label: 'Energy (kWh)', type: 'energy' },
            { key: 'parsed_data.solar_status', label: 'Solar Status', type: 'text' },
            { key: 'parsed_data.over_voltage_alarm', label: 'Over Voltage', type: 'status' },
            { key: 'parsed_data.under_voltage_alarm', label: 'Under Voltage', type: 'status' },
            { key: 'status', label: 'Status', type: 'status' }
        ];
    }
    
    render() {
        return `
            <div class="page-container">
                <!-- Page Header -->
                <div class="page-header">
                    <div class="page-title">
                        <i class="fas fa-sun"></i>
                        <h1>PZEM-017 (DC Solar)</h1>
                        <span class="page-subtitle">Solar Panel to Charge Controller Monitoring</span>
                    </div>
                    <div class="page-actions">
                        <button class="page-action-btn" onclick="location.reload()">
                            <i class="fas fa-refresh"></i>
                            Refresh
                        </button>
                    </div>
                </div>
                
                <!-- Page Description -->
                <div class="page-description">
                    <div class="description-card solar-theme">
                        <div class="description-content">
                            <h3><i class="fas fa-info-circle"></i> About PZEM-017 DC</h3>
                            <p>
                                The PZEM-017 measures DC power generated by your solar panels before it enters the charge controller (SCC). 
                                This data shows your solar generation capacity and helps optimize panel positioning and maintenance.
                            </p>
                            <div class="measurement-points">
                                <div class="measurement-point">
                                    <strong>Measurement Point:</strong> Solar Panel → Charge Controller
                                </div>
                                <div class="measurement-point">
                                    <strong>Update Interval:</strong> Every 10 seconds
                                </div>
                                <div class="measurement-point">
                                    <strong>Peak Generation:</strong> Usually 10 AM - 2 PM
                                </div>
                            </div>
                        </div>
                        <div class="description-icon solar-icon">
                            <i class="fas fa-sun"></i>
                        </div>
                    </div>
                </div>
                
                <!-- Solar Generation Status -->
                <div id="solarStatus" class="solar-status">
                    <div class="status-loading">
                        <i class="fas fa-spinner fa-spin"></i>
                        Checking solar generation status...
                    </div>
                </div>
                
                <!-- Key Metrics Summary -->
                <div id="keyMetrics" class="key-metrics">
                    <div class="metrics-loading">
                        <i class="fas fa-spinner fa-spin"></i>
                        Loading solar metrics...
                    </div>
                </div>
                
                <!-- Data Table -->
                <div id="dataTableContainer">
                    <!-- Table will be rendered here by DataTableComponent -->
                </div>
            </div>
        `;
    }
    
    async initialize() {
        console.log('Initializing PZEM-017 page...');
        
        try {
            // Load solar status
            await this.loadSolarStatus();
            
            // Load key metrics
            await this.loadKeyMetrics();
            
            // Initialize data table
            await this.initializeDataTable();
            
            console.log('PZEM-017 page initialized successfully');
            
        } catch (error) {
            console.error('Error initializing PZEM-017 page:', error);
            
            if (window.sensorApp) {
                window.sensorApp.showToast('Failed to initialize page: ' + error.message, 'error');
            }
        }
    }
    
    async loadSolarStatus() {
        try {
            const statusContainer = document.getElementById('solarStatus');
            if (!statusContainer) return;
            
            if (window.sensorApp && window.sensorApp.components.api) {
                const latestResult = await window.sensorApp.components.api.getLatestData(1);
                
                if (latestResult.success && latestResult.data.pzem_dc && latestResult.data.pzem_dc.length > 0) {
                    const latestData = latestResult.data.pzem_dc[0];
                    this.renderSolarStatus(statusContainer, latestData);
                } else {
                    this.renderNoSolarStatus(statusContainer);
                }
            }
        } catch (error) {
            console.error('Error loading solar status:', error);
            this.renderSolarStatusError(document.getElementById('solarStatus'), error.message);
        }
    }
    
    renderSolarStatus(container, data) {
        if (!data.parsed_data || data.parsed_data.status !== 'success') {
            this.renderNoSolarStatus(container);
            return;
        }
        
        const parsed = data.parsed_data;
        const power = parsed.power_w || 0;
        const voltage = parsed.voltage_v || 0;
        const current = parsed.current_a || 0;
        const solarStatus = parsed.solar_status || 'Unknown';
        
        let statusLevel = 'low';
        let statusIcon = 'fa-moon';
        let statusColor = '#94a3b8';
        
        if (power > 150) {
            statusLevel = 'excellent';
            statusIcon = 'fa-sun';
            statusColor = '#f59e0b';
        } else if (power > 50) {
            statusLevel = 'good';
            statusIcon = 'fa-sun';
            statusColor = '#10b981';
        } else if (power > 10) {
            statusLevel = 'low';
            statusIcon = 'fa-cloud-sun';
            statusColor = '#6b7280';
        }
        
        container.innerHTML = `
            <div class="solar-status-card ${statusLevel}">
                <div class="status-icon" style="color: ${statusColor}">
                    <i class="fas ${statusIcon}"></i>
                </div>
                <div class="status-content">
                    <h3>Solar Generation Status</h3>
                    <div class="status-main">
                        <span class="power-reading">${this.formatNumber(power, 1)} W</span>
                        <span class="status-text">${solarStatus}</span>
                    </div>
                    <div class="status-details">
                        <span>${this.formatNumber(voltage, 2)} V</span>
                        <span>•</span>
                        <span>${this.formatNumber(current, 3)} A</span>
                        <span>•</span>
                        <span class="time-ago">${this.getTimeAgo(data.timestamp)}</span>
                    </div>
                </div>
                <div class="status-indicator ${data.status === 'success' ? 'online' : 'offline'}">
                    ${data.status === 'success' ? 'Online' : 'Offline'}
                </div>
            </div>
            
            ${this.renderAlarms(parsed)}
        `;
    }
    
    renderAlarms(parsed) {
        const alarms = [];
        
        if (parsed.over_voltage_alarm === 'ON') {
            alarms.push({
                type: 'error',
                icon: 'fa-exclamation-triangle',
                message: 'Over-voltage alarm is active! Solar panel voltage is too high.'
            });
        }
        
        if (parsed.under_voltage_alarm === 'ON') {
            alarms.push({
                type: 'warning',
                icon: 'fa-exclamation-circle',
                message: 'Under-voltage alarm is active. Check solar panel connections.'
            });
        }
        
        if (alarms.length === 0) return '';
        
        return `
            <div class="solar-alarms">
                ${alarms.map(alarm => `
                    <div class="alarm-item ${alarm.type}">
                        <i class="fas ${alarm.icon}"></i>
                        ${alarm.message}
                    </div>
                `).join('')}
            </div>
        `;
    }
    
    renderNoSolarStatus(container) {
        container.innerHTML = `
            <div class="no-solar-status">
                <i class="fas fa-exclamation-circle"></i>
                <h3>No Solar Data</h3>
                <p>No recent solar generation data available. The PZEM-017 sensor may be offline.</p>
            </div>
        `;
    }
    
    renderSolarStatusError(container, error) {
        container.innerHTML = `
            <div class="solar-status-error">
                <i class="fas fa-exclamation-triangle"></i>
                <h3>Error Loading Solar Status</h3>
                <p>${error}</p>
                <button onclick="sensorApp.components.pzem017.loadSolarStatus()" class="retry-btn">
                    <i class="fas fa-refresh"></i> Retry
                </button>
            </div>
        `;
    }
    
    async loadKeyMetrics() {
        try {
            const metricsContainer = document.getElementById('keyMetrics');
            if (!metricsContainer) return;
            
            if (window.sensorApp && window.sensorApp.components.api) {
                const latestResult = await window.sensorApp.components.api.getLatestData(1);
                
                if (latestResult.success && latestResult.data.pzem_dc && latestResult.data.pzem_dc.length > 0) {
                    const latestData = latestResult.data.pzem_dc[0];
                    this.renderKeyMetrics(metricsContainer, latestData);
                } else {
                    this.renderNoMetrics(metricsContainer);
                }
            }
        } catch (error) {
            console.error('Error loading key metrics:', error);
            this.renderMetricsError(document.getElementById('keyMetrics'), error.message);
        }
    }
    
    renderKeyMetrics(container, data) {
        if (!data.parsed_data || data.parsed_data.status !== 'success') {
            this.renderNoMetrics(container);
            return;
        }
        
        const parsed = data.parsed_data;
        const isOnline = data.status === 'success';
        
        // Calculate efficiency and performance metrics
        const power = parsed.power_w || 0;
        const voltage = parsed.voltage_v || 0;
        const current = parsed.current_a || 0;
        const efficiency = voltage > 0 && current > 0 ? ((power / (voltage * current)) * 100) : 0;
        
        container.innerHTML = `
            <div class="metrics-grid">
                <div class="metric-card solar ${isOnline ? 'online' : 'offline'}">
                    <div class="metric-header">
                        <i class="fas fa-bolt"></i>
                        <span>Solar Power</span>
                    </div>
                    <div class="metric-value">${this.formatNumber(power, 1)} W</div>
                    <div class="metric-subtitle">Current Generation</div>
                </div>
                
                <div class="metric-card solar ${isOnline ? 'online' : 'offline'}">
                    <div class="metric-header">
                        <i class="fas fa-tachometer-alt"></i>
                        <span>Panel Voltage</span>
                    </div>
                    <div class="metric-value">${this.formatNumber(voltage, 2)} V</div>
                    <div class="metric-subtitle">DC Voltage</div>
                </div>
                
                <div class="metric-card solar ${isOnline ? 'online' : 'offline'}">
                    <div class="metric-header">
                        <i class="fas fa-wave-square"></i>
                        <span>Panel Current</span>
                    </div>
                    <div class="metric-value">${this.formatNumber(current, 3)} A</div>
                    <div class="metric-subtitle">DC Current</div>
                </div>
                
                <div class="metric-card solar ${isOnline ? 'online' : 'offline'}">
                    <div class="metric-header">
                        <i class="fas fa-chart-line"></i>
                        <span>Total Energy</span>
                    </div>
                    <div class="metric-value">${this.formatNumber(parsed.energy_kwh || 0, 3)} kWh</div>
                    <div class="metric-subtitle">Generated Today</div>
                </div>
                
                <div class="metric-card solar ${isOnline ? 'online' : 'offline'}">
                    <div class="metric-header">
                        <i class="fas fa-percentage"></i>
                        <span>Efficiency</span>
                    </div>
                    <div class="metric-value">${this.formatNumber(efficiency, 1)}%</div>
                    <div class="metric-subtitle">Panel Performance</div>
                </div>
                
                <div class="metric-card solar ${isOnline ? 'online' : 'offline'}">
                    <div class="metric-header">
                        <i class="fas fa-sun"></i>
                        <span>Solar Condition</span>
                    </div>
                    <div class="metric-value">${parsed.solar_status || 'Unknown'}</div>
                    <div class="metric-subtitle">Current Status</div>
                </div>
            </div>
            
            <div class="last-updated">
                <i class="fas fa-clock"></i>
                Last updated: ${this.formatTimestamp(data.timestamp)}
                <span class="status-indicator ${isOnline ? 'online' : 'offline'}">
                    ${isOnline ? 'Online' : 'Offline'}
                </span>
            </div>
        `;
    }
    
    renderNoMetrics(container) {
        container.innerHTML = `
            <div class="no-metrics">
                <i class="fas fa-exclamation-circle"></i>
                <h3>No Recent Data</h3>
                <p>No recent PZEM-017 solar data available. The sensor may be offline or panels not generating.</p>
            </div>
        `;
    }
    
    renderMetricsError(container, error) {
        container.innerHTML = `
            <div class="metrics-error">
                <i class="fas fa-exclamation-triangle"></i>
                <h3>Error Loading Metrics</h3>
                <p>${error}</p>
                <button onclick="sensorApp.components.pzem017.loadKeyMetrics()" class="retry-btn">
                    <i class="fas fa-refresh"></i> Retry
                </button>
            </div>
        `;
    }
    
    async initializeDataTable() {
        const container = document.getElementById('dataTableContainer');
        if (!container) return;
        
        if (window.sensorApp && window.sensorApp.components.dataTable) {
            const tableConfig = {
                sensorType: this.sensorType,
                title: this.pageTitle,
                columns: this.columns,
                showDateFilter: true,
                showExport: true
            };
            
            container.innerHTML = window.sensorApp.components.dataTable.render(tableConfig);
            await window.sensorApp.components.dataTable.initialize(tableConfig);
        }
    }
    
    getTimeAgo(timestamp) {
        const now = new Date();
        const time = new Date(timestamp);
        const diffMs = now - time;
        const diffMins = Math.floor(diffMs / 60000);
        
        if (diffMins < 1) return 'Just now';
        if (diffMins < 60) return `${diffMins}m ago`;
        
        const diffHours = Math.floor(diffMins / 60);
        if (diffHours < 24) return `${diffHours}h ago`;
        
        const diffDays = Math.floor(diffHours / 24);
        return `${diffDays}d ago`;
    }
    
    formatNumber(value, decimals = 2) {
        return Number(value).toLocaleString('id-ID', {
            minimumFractionDigits: decimals,
            maximumFractionDigits: decimals
        });
    }
    
    formatTimestamp(timestamp) {
        return new Date(timestamp).toLocaleString('id-ID', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
    
    getStyles() {
        return `
            <style>
                .solar-theme {
                    background: linear-gradient(135deg, #fef3c7, #fbbf24, #f59e0b);
                }
                
                .solar-icon {
                    color: #f59e0b;
                }
                
                .solar-status {
                    margin-bottom: 24px;
                }
                
                .solar-status-card {
                    display: flex;
                    align-items: center;
                    gap: 20px;
                    background: white;
                    border: 2px solid var(--border-color);
                    border-radius: 16px;
                    padding: 24px;
                    transition: all 0.3s ease;
                }
                
                .solar-status-card.excellent {
                    border-color: #f59e0b;
                    background: linear-gradient(135deg, #fffbeb, #fef3c7);
                }
                
                .solar-status-card.good {
                    border-color: #10b981;
                    background: linear-gradient(135deg, #ecfdf5, #d1fae5);
                }
                
                .solar-status-card.low {
                    border-color: #6b7280;
                    background: linear-gradient(135deg, #f9fafb, #f3f4f6);
                }
                
                .status-icon {
                    font-size: 3rem;
                    animation: pulse 2s infinite;
                }
                
                @keyframes pulse {
                    0%, 100% { opacity: 1; }
                    50% { opacity: 0.7; }
                }
                
                .status-content {
                    flex: 1;
                }
                
                .status-content h3 {
                    color: var(--text-primary);
                    margin-bottom: 8px;
                    font-size: 1.2rem;
                }
                
                .status-main {
                    display: flex;
                    align-items: baseline;
                    gap: 16px;
                    margin-bottom: 8px;
                }
                
                .power-reading {
                    font-size: 2rem;
                    font-weight: 700;
                    color: var(--text-primary);
                    font-variant-numeric: tabular-nums;
                }
                
                .status-text {
                    font-size: 1rem;
                    font-weight: 600;
                    color: var(--text-secondary);
                }
                
                .status-details {
                    display: flex;
                    align-items: center;
                    gap: 8px;
                    font-size: 0.9rem;
                    color: var(--text-muted);
                }
                
                .time-ago {
                    font-weight: 500;
                }
                
                .solar-alarms {
                    margin-top: 16px;
                }
                
                .alarm-item {
                    display: flex;
                    align-items: center;
                    gap: 12px;
                    padding: 12px 16px;
                    border-radius: 8px;
                    font-weight: 500;
                    margin-bottom: 8px;
                }
                
                .alarm-item.error {
                    background: linear-gradient(135deg, #fecaca, #fca5a5);
                    border: 1px solid #f87171;
                    color: #991b1b;
                }
                
                .alarm-item.warning {
                    background: linear-gradient(135deg, #fef3c7, #fde68a);
                    border: 1px solid #fbbf24;
                    color: #92400e;
                }
                
                .metric-card.solar {
                    border-color: #f59e0b;
                }
                
                .metric-card.solar.online::before {
                    background: linear-gradient(90deg, #f59e0b, #fbbf24);
                }
                
                .no-solar-status,
                .solar-status-error {
                    text-align: center;
                    padding: 40px 20px;
                    background: var(--surface-color);
                    border: 1px solid var(--border-color);
                    border-radius: 12px;
                    color: var(--text-secondary);
                }
                
                .solar-status-error {
                    color: var(--error-color);
                }
                
                /* Mobile Responsive */
                @media (max-width: 768px) {
                    .solar-status-card {
                        flex-direction: column;
                        text-align: center;
                        gap: 16px;
                    }
                    
                    .status-main {
                        flex-direction: column;
                        gap: 8px;
                    }
                    
                    .status-details {
                        justify-content: center;
                    }
                }
            </style>
        `;
    }
}

// Export for use in other components
window.PZEM017Page = PZEM017Page;